{
  "swagger" : "2.0",
  "info" : {
    "description" : "**IMPORTANT:** This API specification is a work in progress, so until there is an official release, please bear in mind that this spec might change. Having said that, the DNB Developer team would love to hear your thoughts on the current specification. After all, that is why we are publishing it! So feel free to contact us at developer@dnb.no. \n\n**Sandbox only:** \nNo APIs are currently publicly available in production - so all data returned from these endpoints are from a static sandbox environment containing *dummy data* only. We trying our best to get a dynamic sandbox and (of course) access to production available to you, but until then, enjoy the feeling of being able to initiate infinite payments without influencing your account balance.. Test customer SSNs can be found under `/testCustomers`.\n\n**Authorization**\nWe use AWS signatures for tokens, with AWS Region `eu-west-1`. You can read more about how it works at AWS's own docs: https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html.\n\n**General guidelines:**\n* We use camelCase, starting with lowercase: ```customerEngagement```, ```accountNumber```, ```creditCard```, etc.\n* Standards are mentioned and refered to, unless implicit by Swagger.\n* General rule: The response (object) determines endpoint: If the response is ```account```, the endpoint should be under ```/accounts```. In cases where this may be up for discussion, multiple endpoints may, for a limited time, be available in order to evaluate.\n* Versioning: Major.Minor.Patch (https://semver.org/). Major: Incompatible changes. Minor: New, backwards-compatible functionality. Patch: Backwards-compatible fixes. \n\n**Github**\n\nOur swagger documentation and test data are available on Github: https://github.com/DNBbank/ \n\nCode examples (python, java, nodejs) and Postman collection are available on Github: https://github.com/DNBbank/getting-started/\n\n**Contact DNB Open Banking**\n\nYou reach the entire team at developer@dnb.no. We do our best to reply as quickly as possible, and would love to hear from you!\n\n\n\n",
    "version" : "0.10.68",
    "title" : "DNB Developer APIs",
    "termsOfService" : "https://developer.dnb.no/#/termsofuse?pg=l",
    "contact" : {
      "name" : "Email",
      "url" : "https://developer.dnb.no",
      "email" : "developer@dnb.no"
    }
  },
  "x-tagGroups" : [
    {
    "name": "Developer Portal APIs",
    "tags": ["API", "Test_Customers", "Customers", "Accounts", "Transactions", "Payments", "Cards", "Currencies", "Location"]
    }
  ],       
  "host" : "developer-api-sandbox.dnb.no",
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/api/testCustomers" : {
      "get" : {
        "tags" : [ "Test_Customers", "Draft", "100" ],
        "summary" : "Test Customers",
        "description" : "There are ten fictitious test customers available in our sandbox. This API will return a list of their names and SSNs. One of these SSNs should be used when calling `Get API token`.\n\n\n**Please note**: \nThe customers, along with all their associated data are *entirely fictitious* generated from test scripts residing at https://github.com/DNBbank/dnbtestdata. If you'd like to improve the scripts, nothing makes us more happy than a pull request! ",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request Succeeded",
            "schema" : {
              "$ref" : "#/definitions/testCustomers"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/api/token/" : {
      "get" : {
        "tags" : [ "API", "Draft", "101" ],
        "summary" : "Get API token",
        "description" : "Returning a JWT token representing the end-consumer. You need this token for calling the `Customer`,` Accounts`, `Transactions`, `Cards` and `Payments` APIs. Find test customer SSNs under `/api/testCustomers`.\n\nThe JWT token has an expiry time of ten minutes. After it has expired, call the API again to get a nice and fresh token.\n\n**Authorization: AWS Signature v.4**\nWe use AWS Signatures v.4 for authorization, with AWS region `eu-west-1`. If you're using Postman, the authorization header will be automatically generated when you send the request. For detailed information, we recommend [AWS's own documentation](https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html).  \n\n**Tip for Postman users:** \nHave a look at our Postman collection which is available on Github as well as code examples: https://github.com/DNBbank/getting-started/. Will make your life a little sweeter.",
        "operationId" : "getApiToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "An object representing the ID of the customer. Should be given like: /api/token?customerId={\"type\":\"SSN\",\"value\":\"4238934242\"}",
          "x-example" : "{\"type\":\"SSN\",\"value\":\"4238934242\"}"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request Succeeded",
            "schema" : {
                "$ref" : "#/definitions/token"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/customers/current" : {
      "get" : {
        "tags" : [ "Customers", "Sandbox", "1" ],
        "summary" : "Get customer details",
        "description" : "Retrieves basic contact information about a ```customer```. Currently only covering retail customers.",
        "operationId" : "getCustomerCurrent",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "Your JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Customer found",
            "schema" : {
              "$ref" : "#/definitions/customer"
            },
            "headers" : {
              "X-DNBAPI-JWT" : {
                "type" : "string"
              },
              "X-DNBAPI-Channel" : {
                "type" : "string"
              },
              "X-DNBAPI-Trace-Id" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/accounts" : {
      "get" : {
        "tags" : [ "Accounts", "Sandbox", "2" ],
        "summary" : "Get accounts",
        "description" : "Returns the list of DNB accounts for the current customer. ",
        "operationId" : "getAccountsForCurrentUser",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request Succeeded",
            "schema" : {
              "$ref" : "#/definitions/account"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        },
        "security" : [ ]
      }
    },
    "/accounts/{accountNumber}" : {
      "get" : {
        "tags" : [ "Accounts", "Sandbox", "2" ],
        "summary" : "Get account details",
        "description" : "Returns the ```accountDetails``` of a given account. ",
        "operationId" : "getAccountDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/accountDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "accountNumber not found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        },
        "security" : [ ]
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "The account number of the account you want to access.",
        "minLength" : 11,
        "maxLength" : 11,
        "pattern" : "^\\d{11}$",
        "x-example" : "12345678901"
      } ]
    },
    "/accounts/{accountNumber}/balance" : {
      "get" : {
        "tags" : [ "Accounts", "Sandbox", "2" ],
        "summary" : "Get account balance",
        "description" : "This API returns the balance of an account.",
        "operationId" : "getAccountBalance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/balance"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        },
        "security" : [ ]
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "The account number of the account you want to access.",
        "minLength" : 11,
        "maxLength" : 11,
        "pattern" : "^\\d{11}$",
        "x-example" : "12345678901"
      } ]
    },
    "/transactions/{accountNumber}/" : {
      "get" : {
        "tags" : [ "Transactions", "Sandbox", "3" ],
        "summary" : "Get transactions for account",
        "description" : "A `transaction` is a completed operation performed on a `card `or `account`, in contrast to `due payment`, which is planned but not completed.\n\nA `transaction` could either be positive or negative. A positive has added money to the account  `balance` and hence increased it, while a negative transaction as decreased it.\n\nThis API retrives the last transactions on an account, maximum going one year (12 months) back in time.",
        "operationId" : "getAccountTransactions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fromDate",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "The date you want to get transactions from, in the format: YYYY-MM-DD",
          "x-example" : "2018-08-15"
        }, {
          "name" : "toDate",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "The date you want to get transactions to, in the format: YYYY-MM-DD",
          "x-example" : "2018-08-15"
        }, {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "format" : "date",
          "description" : "The JWT Token generated from Get API Token."
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "format" : "date",
          "description" : "The API key from your app page in DNB Developer."
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
              "schema" : {
                "$ref" : "#/definitions/transaction"
              }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "minLength" : 11,
        "maxLength" : 11,
        "pattern" : "^\\d{11}$",
        "x-example" : "12345678901",
        "description" : "The account number of the current user"
      } ]
    },
    "/payments" : {
      "post" : {
        "tags" : [ "Payments", "Sandbox", "4" ],
        "summary" : "Initiate payment",
        "description" : "Initiate a domestic payment going directly from a DNB account with KID or message. Also allows for transfers (payments between accounts held by the same owner). The recieving account can be in whichever bank, but for domestic payments it has to be a Norwegian one.\n\nAccepts a ```paymentInitiation``` POST, and returns HTTP 201 with the ```PaymentId``` of the successfully created ```payment```.\n\n***Note**: As our sandbox is currently static, initiating payments unfortuntately won't reflect in neither the balance nor latest transactions of the account. While we are working hard to get you a dynamic sandbox, you may in the meanwhile look at it as finally having that infinite account never getting affected by your purchases.*",
        "operationId" : "paymentInitiate",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        }, {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/paymentInitiation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Created",
            "schema" : {
              "type" : "object",
              "description" : "Returning id of the new payment",
              "properties" : {
                "paymentId" : {
                  "type" : "string",
                  "example" : "12345"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/payments/{accountNumber}/pending-payments/{paymentId}" : {
      "delete" : {
        "tags" : [ "Payments", "Sandbox", "4" ],
        "summary" : "Delete payment by id",
        "description" : "Delete a due payment for an DNB account. To list the due payments, head over to *Get due payments*.\n\n**Note:** As our sandbox is currently static, deleting payments will not update the list of due payments in the Sandbox. The reason we are still making the APIs available is to allow for testing of responses and such while readying the dynamic sandbox for you. ",
        "operationId" : "deletePayment",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "e API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "204" : {
            "description" : "Gone forever! No further information needed or provided.",
            "schema" : {
              "$ref" : ""
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Unknown paymentId",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Payments", "Sandbox", "4" ],
        "summary" : "Update existing payment",
        "description" : "Update a due payment on an accont. A due ```payment``` can be updated until its due date, by changing one of the following parameters:\n* Date \n* Amount\n* Status (deactivate, reactivate)\n\nReturns the updated ```payment```.\n\n*Note: As our sandbox is currently static, deleting payments will not update the list of due payments in the Sandbox. The reason we are still making the APIs available is to allow for testing of responses and such while readying the dynamic sandbox for you.*",
        "operationId" : "updatePayment",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        }, {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/paymentUpdation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment updated. (Note: This was previously ```HTTP 201 Created```, but since the payment was already created before this request, it is now ```HTTP 200 OK```)",
            "schema" : {
              "$ref" : "#/definitions/payment"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [
        {
          "name" : "accountNumber",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "description" : "Account number of current customer",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "x-example" : "12345678901"
        },
        {
        "name" : "paymentId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "The ID of the payment you want to access."
        }
       ]
    },
    "/payments/{accountNumber}/due" : {
      "get" : {
        "tags" : [ "Payments", "Sandbox", "4" ],
        "summary" : "Get due payments for an account",
        "description" : "A `due payment` is a scheduled operation on an `account`. It can be updated or deleted until its' due date. Once the payment date is reached, the due payments becomes a payment. When the payment is processed, it becomes a `transaction` on that account.",
        "operationId" : "getPaymentsDue",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/payment"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Account Number of current customer",
        "minLength" : 11,
        "maxLength" : 11,
        "pattern" : "^\\d{11}$",
        "x-example" : "12345678901"
      } ]
    },
    "/payments/{accountNumber}/due/{paymentId}" : {
      "get" : {
        "tags" : [ "Payments", "Sandbox", "4" ],
        "summary" : "Get due payment by payment id",
        "description" : "A due payment is a `payment` that is scheduled to be deducted from an account. It can be changed until its due date, by using update or delete payment\n\nThis API retrieves the details of a specific `due payment`. complete with with ```paymentDetails```.",
        "operationId" : "getPaymentDueById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/payment"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "The Id of the payment you want to access.",
        "minLength" : 11,
        "maxLength" : 11,
        "pattern" : "^\\d{11}$",
        "x-example" : "12345678901"
      }, {
        "name" : "paymentId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/cards" : {
      "get" : {
        "tags" : [ "Cards", "Sandbox", "5" ],
        "summary" : "Get cards",
        "description" : "Returns a list of all the credit and debit cards registered in DNB for the current customer.\n",
        "operationId" : "cards",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/card"
              }
            }
          }
        }
      }
    },
    "/cards/{cardId}/" : {
      "get" : {
        "tags" : [ "Cards", "Sandbox", "5" ],
        "summary" : "Get card",
        "description" : "Returns information about a single credit or debit card.",
        "operationId" : "getCardDetailsById",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/card"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "The unique id of the card. Note that this is not the same as what is printed on a card, but an ID which can be fetched from Get card list.",
        "x-example" : "12345678901"
      } ]
    },
    "/cards/{cardId}/balance" : {
      "get" : {
        "tags" : [ "Cards", "Sandbox", "5" ],
        "summary" : "Get card balance",
        "description" : "Returns the `balance` of a credit card, if available. For getting the balance of a debit card, use `Get Account Balance` for the associated account.",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request Succeeded",
            "schema" : {
              "$ref" : "#/definitions/balance"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "The unique id of the card. Note that this is not the same as what is printed on a card, but an ID which can be fetched from Get card list."
      } ]
    },
    "/cards/{cardId}/block" : {
      "put" : {
        "tags" : [ "Cards", "Sandbox", "5" ],
        "summary" : "Block card",
        "description" : "This API enables the end-customer to block a debit or credit card (not including Cresco Cards). To *block* means to not allow any payment to go through on a card or account.\n\nThis operation is only allowed where `cardStatus` is `Active` and `blockAllowed` is `true`. This API will change that status of the card to `Blocked`.",
        "operationId" : "blockCard",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Card is blocked",
            "schema" : {
              "type" : "string"
            },
            "examples" : {
              "application/json" : "Card Id XXXXXXXXX has been blocked as per request."
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/cards/{cardId}/unblock" : {
      "put" : {
        "tags" : [ "Cards", "Sandbox", "5" ],
        "summary" : "Unblock card",
        "description" : "This API enables the end-customer to unblock a card having a so-called \"soft block\", i.e. where `cardStatus` is `Blocked` and `unblockAllowed` is `true`. This will change that status of the card to `Unblocked`.\n\n**Note:** Unblock is only available for debit cards.",
        "operationId" : "unblockCard",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Card is unblocked",
            "schema" : {
              "type" : "string"
            },
            "examples" : {
              "application/json" : "Card Id XXXXXXXXX has been unblocked as per request"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/currencies/{toCurrency}" : {
      "get" : {
        "tags" : [ "Currencies", "Sandbox", "6" ],
        "summary" : "Get currency rate list",
        "description" : "Returns a list of currency rates for the most common currencies, for the specified base currency. \n\n**NOTE**: The source data is based on NOK as the base currency. Any other base currency requires different source data, which is currently not available. ",
        "operationId" : "currencyList",
        "parameters" : [ {
          "name" : "date",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Not yet implemented.",
          "x-example" : "2018-12-31"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/currencyRate"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "toCurrency",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "ISO 4217: alpha 3-letter upcase e.g ```NOK```. This is the currency we are converting the amount _to_. \n\nThe response will contain a list of currency rates for various currencies, converted to the ```toCurrency```. If ```toCurrency```is ```NOK```, the list will contain a list of ```currencyRate```s for ```EUR```, ```USD```, ```GBP```, etc converted into ```NOK```.",
        "default" : "NOK",
        "minLength" : 3,
        "maxLength" : 3,
        "x-example" : "NOK"
      } ]
    },
    "/currencies/{base}/convert/{quote}/amount/{amount}" : {
      "get" : {
        "tags" : [ "Currencies", "Sandbox", "6" ],
        "summary" : "Currency conversion",
        "description" : "Convert amount from one currency to another - just like a currency calcuator. Note that this API is only available in Sandbox for now, meaning that the currencies returned are not updated.\n\n\n**NOTE**: The source data is based on NOK as the base currency. Because of this, one of the currencies (base or quote) _must be_ NOK. Conversion between any two currencies requires different source data, which is currently not available. ",
        "operationId" : "currencyConvert",
        "parameters" : [ {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/currencyRate"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "base",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "quote",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "amount",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/locations/branches" : {
      "get" : {
        "tags" : [ "Location", "Sandbox", "7" ],
        "summary" : "Get list of all DNB branches",
        "operationId" : "listBranches",
        "parameters" : [ {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/branch"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/locations/atms" : {
      "get" : {
        "tags" : [ "Location", "Sandbox", "7" ],
        "summary" : "Get list of all DNB ATMs",
        "operationId" : "listAtms",
        "parameters" : [ {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/atm"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/locations/branches/coordinates" : {
      "get" : {
        "tags" : [ "Location", "Sandbox", "7" ],
        "summary" : "Find nearest branch by coordinates",
        "description" : "**NOTE:** Currently uses _aerial distance_ only, not distance using roads, etc.\n\nReturns an array of ```branches```, as there may be more than one branch that is \"the nearest\".",
        "operationId" : "findBranchByCoordinates",
        "parameters" : [ {
          "name" : "latitude",
          "in" : "query",
          "required" : true,
          "type" : "number"
        }, {
          "name" : "longitude",
          "in" : "query",
          "required" : true,
          "type" : "number"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/branch"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/locations/atms/coordinates" : {
      "get" : {
        "tags" : [ "Location", "Sandbox", "7" ],
        "summary" : "Find nearest ATM by coordinates",
        "description" : "**NOTE:** Currently uses _aerial distance_ only, not distance using roads, etc.\n\nReturns an array of ```atm```, as there may be more than one ATM that is \"the nearest\".",
        "operationId" : "findAtmByCoordinates",
        "parameters" : [ {
          "name" : "latitude",
          "in" : "query",
          "required" : true,
          "type" : "number"
        }, {
          "name" : "longitude",
          "in" : "query",
          "required" : true,
          "type" : "number"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/atm"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/locations/branches/{branchid}" : {
      "get" : {
        "tags" : [ "Location", "Sandbox", "7" ],
        "summary" : "Get branch details",
        "description" : "Contact information, opening hours, etc for a specific branch. See ```/locations/branches``` for getting all ```branches``` and their ids.",
        "operationId" : "getBranchDetails",
        "parameters" : [ {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/branch"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "branchid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Id of branch",
        "x-example" : "12345"
      } ]
    },
    "/locations/branches/findbyaddress" : {
      "get" : {
        "tags" : [ "Location", "Sandbox", "7" ],
        "summary" : "Find nearest branch by address",
        "description" : "**NOTE:** Not planned for the first phase. See ```/locations/branches``` and ```/locations/Atms```. Needs an ```address```(or smiliar data) as a ```POST``` request.\n\nReturns an array of ```branches```, as there may be more than one branch that is \"the nearest\".\n",
        "operationId" : "findBranchByAddress",
        "parameters" : [ {
          "name" : "address",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "For now: Assume geocoding functionality similar to Google Maps: https://developers.google.com/maps/documentation/geocoding/intro"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/branch"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "customers" : {
      "type" : "object",
      "required" : [ "customerName", "ssn" ],
      "properties" : {
        "ssn" : {
          "type" : "string",
          "description" : "The SSN of a test customer",
          "example" : "29105573083"
        },
        "customerName" : {
          "type" : "string",
          "description" : "This is the fictious name of the test customer associated with the given SSN.",
          "example" : "Liv Ødegård"
        }
      },
      "description" : "The test customers available in our sandbox. "
    },
    "testCustomers" : {
      "type" : "object",
      "properties" : {
        "customers" : {
          "type" : "array",
          "items" : {
          "$ref" : "#/definitions/customers"
          }
        }
      },
      "description" : "A token representing the end-consumer of the API.\n"
    },
    "token" : {
      "type" : "object",
      "required" : [ "tokenInfo" ],
      "properties" : {
        "tokenInfo" : {
          "type" : "array",
          "items" : {
          "$ref" : "#/definitions/tokenInfo"
          }
        }
      },
      "description" : "A token representing the end-consumer of the API.\n"
    },
    "tokenInfo" : {
      "type" : "object",
      "required" : [ "customerPublidId", "jwtToken" ],
      "properties" : {
        "customerPublidId" : {
          "type" : "string",
          "description" : "The ID value of the customer in question",
          "example" : "29105573083"
        },
        "jwtToken" : {
          "type" : "string",
          "description" : "Your token.",
          "example" : "eyJhbGciOiJBMTI4S1ciLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0.dgQFqwxRJAeiAjaV8CHpstTIQNFy0Vb4Qf9-MdGS4USbpA_UJEC18A.a9Cg-ZW8_qvCL-15U-D0vQ.0AhVInk87Fy36Z7stvDVrb7_w1JWFUen2b7xshHeTOSKYT3_PDhbBZGRq3yJ1ZVBc5j15M4mFkpOmrfFfwWyUxrZOACLjxmNVEeaE8gzjR4GR0nf0S7ZtM-kLC9KY_WGMVKonzesc9afp3h9655HpOUF8_IdzDPAtgux6ztmNrisN0k0U-KrYuLeEawcNsRfIq27cb2TSho0sTx3Z7foDW_YmnLtphHV5OzecIeKi4DU8czd4Q3AP-IjHCv5c3fFBStilGY4czaosdA5Hp7QwftZej3B7h5LdW8umOJasrjYAxr7Jkia9urb22v4fo5R9Wm9cPMqayoNhbf8eeTQ5aHlSQV55zLxrrt473YAP2x-Swo2ROYaRbFjo5D-e02CNpZglZLnv2zMDf-H7elmsW9-3JH6DvG70seQEm4j3frtq_F2jL6k2ng16Hk4TYVtQE4FsFK8WT6V3K8TI9XmqyUOYYuJnSDmN0GyACxfRfTiEUz2e-ZK4QbuFCdoNqkmsDmuV3gWBEaXfo_IHHjM8iZM-b94NxBGQ0tsMoXf8aTF9bIBI1lJbKVRTOWy1B70_VKroub0RfI4uba8-PX5KXGVbmo5Wsk_g8K3hCDwU6jpvaicRlYQHVJo_ANG-A8E.gPY3Xc6CMZN_o13jc3YJtQ"
        }
      },
      "description" : "A token representing the end-consumer of the API.\n"
    },
    "customerId" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "customer" : {
      "type" : "object",
      "required" : [ "address", "countryTax", "customerId", "customerType", "email", "phone" ],
      "properties" : {
        "customerId" : {
          "type" : "string",
          "description" : "SSN (11 digits) or organization number (9 digits).",
          "minLength" : 9,
          "maxLength" : 11,
          "pattern" : "^\\d{9,11}$",
          "example" : "12345678901"
        },
        "firstName" : {
          "type" : "string",
          "description" : "First name. May be used for the contact person if type is ```PERSON```.",
          "example" : "Bruce"
        },
        "lastName" : {
          "type" : "string",
          "description" : "Surname. May be used for the contact person if type is ```PERSON```.",
          "example" : "Wayne"
        },
        "countryTax" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/countryTax"
          }
        },
        "address" : {
          "$ref" : "#/definitions/address"
        },
        "email" : {
          "type" : "string",
          "description" : "Email address. RFC 5322.",
          "minLength" : 6,
          "pattern" : "^\\A[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@ (?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\z$",
          "example" : "example@example.com"
        },
        "phone" : {
          "type" : "string",
          "description" : "Including \"+\" and international prefix. E.164: https://www.twilio.com/docs/glossary/what-e164 Whitespace and dashes are stripped.",
          "pattern" : "^\\+?[1-9]\\d{1,14}$",
          "example" : "+4791504800"
        },
        "countryOfBirth" : {
          "type" : "string",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "minLength" : 2,
          "maxLength" : 2,
          "example" : "NO"
        },
        "citizenships" : {
          "type" : "array",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "items" : {
            "type" : "string",
            "minLength" : 2,
            "maxLength" : 2,
            "example" : "NO"
          }
        },
        "customerType" : {
          "type" : "string",
          "description" : "```PERSON```, ```COMPANY``` are expected values\nFor release 1 PERSON will be hardcoded",
          "default" : "PERSON",
          "enum" : [ "PERSON" ],
          "example" : "PERSON"
        },
        "companyName" : {
          "type" : "string",
          "description" : "Out of scope for release 1\n\nCompany name, if type is ```COMPANY```.",
          "example" : "DNB"
        }
      },
      "description" : "One common ```customer```data object for all kinds of customers. A customer may have one or more ```customerEngagement```s."
    },
    "countryTax" : {
      "type" : "object",
      "properties" : {
        "taxLiabilityCountry" : {
          "type" : "string",
          "description" : "ISO 3166-1 alpha-2: : https://www.iso.org/standard/63546.html",
          "default" : "NO",
          "example" : "NO"
        },
        "taxIdentificationNumber" : {
          "type" : "string",
          "example" : "1234567890"
        }
      }
    },
    "accountInterestDetails" : {
      "type" : "object",
      "required" : [ "accruedInterestAndFeesToDate", "earnedInterestToDate", "feesToDate", "interestRate" ],
      "properties" : {
        "interestRate" : {
          "type" : "number",
          "example" : 2.01
        },
        "earnedInterestToDate" : {
          "type" : "number",
          "example" : 100.01
        },
        "accruedInterestAndFeesToDate" : {
          "type" : "number",
          "example" : 1.01
        },
        "feesToDate" : {
          "type" : "number",
          "example" : 5.01
        },
        "accruedInterestFromLastYear" : {
          "type" : "number",
          "example" : 500.01
        }
      },
      "description" : "Details about an the interest for an ```account```."
    },
    "accountStatement" : {
      "type" : "object",
      "required" : [ "accountNumber", "month", "transactions", "year" ],
      "properties" : {
        "accountNumber" : {
          "type" : "string",
          "minLength" : 11,
          "maxLength" : 11,
          "example" : "12001100000"
        },
        "year" : {
          "type" : "string",
          "description" : "YYYY",
          "example" : "1990"
        },
        "month" : {
          "type" : "string",
          "description" : "MM, January: 01",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^\\d{2}$",
          "example" : "01"
        },
        "transactions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/transaction"
          }
        }
      },
      "description" : "Monthly ```account``` statement. "
    },
    "accountDetails" : {
      "type" : "object",
      "required" : [ "BIC", "IBAN", "created", "currency" ],
      "properties" : {
        "IBAN" : {
          "type" : "string",
          "description" : "ISO 13616:2007: https://www.iso.org/standard/41031.html No whitespace. Enjoy the regex.",
          "pattern" : "^((NO)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(NO)[0-9A-Z]{13}|(BE)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(BE)[0-9A-Z]{14}|(DK|FO|FI|GL|NL)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(DK|FO|FI|GL|NL)[0-9A-Z]{16}|(MK|SI)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(MK|SI)[0-9A-Z]{17}|(BA|EE|KZ|LT|LU|AT)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(BA|EE|KZ|LT|LU|AT)[0-9A-Z]{18}|(HR|LI|LV|CH)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{1}|(HR|LI|LV|CH)[0-9A-Z]{19}|(BG|DE|IE|ME|RS|GB)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(BG|DE|IE|ME|RS|GB)[0-9A-Z]{20}|(GI|IL)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(GI|IL)[0-9A-Z]{21}|(AD|CZ|SA|RO|SK|ES|SE|TN)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(AD|CZ|SA|RO|SK|ES|SE|TN)[0-9A-Z]{22}|(PT)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{1}|(PT)[0-9A-Z]{23}|(IS|TR)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(IS|TR)[0-9A-Z]{24}|(FR|GR|IT|MC|SM)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(FR|GR|IT|MC|SM)[0-9A-Z]{25}|(AL|CY|HU|LB|PL)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(AL|CY|HU|LB|PL)[0-9A-Z]{26}|(MU)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(MU)[0-9A-Z]{28}|(MT)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(MT)[0-9A-Z]{29})$",
          "example" : "NO9386011117947"
        },
        "BIC" : {
          "type" : "string",
          "description" : "ISO 9362: https://en.wikipedia.org/wiki/ISO_9362",
          "pattern" : "^[a-z]{6}[2-9a-z][0-9a-np-z]([a-z0-9]{3}|x{3})?$",
          "example" : "DNBANOKKXXX"
        },
        "currency" : {
          "type" : "string",
          "description" : "Currency: ISO 4217: alpha 3-letter upcase. https://www.iso.org/iso-4217-currency-codes.html",
          "minLength" : 3,
          "maxLength" : 3,
          "pattern" : "^[A-Z]{3}$",
          "example" : "NOK"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Time of last update.",
          "example" : "2018-12-31T23:59:59+01"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Time of account creation.",
          "example" : "2018-12-31T23:59:59+01"
        },
        "accountInterestDetails" : {
          "$ref" : "#/definitions/accountInterestDetails"
        }
      },
      "description" : "Details for an ```account```, with optional reference to ```accountDetails```.\n\nIBAN help: http://www.xe.com/ibancalculator/sample/?ibancountry=norway\n\nPossible regex for IBAN:"
    },
    "account" : {
      "type" : "object",
      "required" : ["accountInfo"],
      "properties" : {
        "accounts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/accountInfo"
          }
        }
      }
    },
    "accountInfo" : {
      "type" : "object",
      "properties" : {
        "accountCurrency" : {
          "type" : "string",
          "description" : "Currency of the account defined by ISO 4217",
          "default" : "NOK",
          "minLength" : 3,
          "maxLength" : 3,
          "example" : "NOK"
        },
        "accountNumber" : {
          "type" : "string",
          "description" : "The unique account number",
          "minLength" : 11,
          "maxLength" : 11,
          "example" : "'12001100000'"
        },
        "productName" : {
          "type" : "string",
          "description" : "The type of account. Most common types include 'BRUKSKONTO', 'SPAREKONTO', 'BRUKSKONTO TILLEGG', 'RAMMELÅN', 'LÅN' and 'BSU'.",
          "example" : "'BRUKSKONTO'"
        },
        "accountOwnerName" : {
          "type" : "string",
          "description" : "Name of the owner of the account",
          "example" : "'Astrid Ruud'"
        },
        "accountName" : {
          "type" : "string",
          "description" : "Name of the account",
          "example" : "'Lån'"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the account",
          "example" : "'DEPOSIT'"
        }
      },
      "description" : "Same ```account``` data object is used for all types of accounts. The ```type``` property determines the type. \n\nAn ```account``` may have ```accountDetails```, which may again have ```accountBalance``` and  ```accountInterestDetails```. \n\n**Format**\n\nA Norwegian ```account```has three groups: xxxx yy zzzzc. Excample: 8601 11 17947.\n\n* xxxx: Bank register number, identifying bank and branch. \n* yy: Account group. \n* zzzz: Customer account number.  \n* c: Control digit, modulo 11 with weight number 5432765432.\n\nMore details: https://www.ecbs.org/iban/norway-bank-account-number.html\n"
    },

    "balance" : {
      "type" : "object",
      "required" : [ "balance", "currency" ],
      "properties" : {
        "balance" : {
          "type" : "number",
          "description" : "The current balance of a debit account or  a credit card. Does not take into account due payments, and is not a \"safe to spend\" amount. For credit cards, it does not include the credit gotten from the bank.",
          "example" : 90000.01
        },
        "lastBalanceChange" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2018-12-31T23:59:59+01:00"
        },
        "currency" : {
          "type" : "string",
          "description" : "ISO 4217: alpha 3-letter upcase: https://www.iso.org/iso-4217-currency-codes.html",
          "default" : "NOK",
          "minLength" : 3,
          "maxLength" : 3,
          "pattern" : "`^[A-Z]{3}$",
          "example" : "NOK"
        },
        "creditLimit" : {
          "type" : "integer",
          "description" : "The credit limit represents how much can be credited (lent from) the credit card in question.",
          "minimum" : 0,
          "example" : "100000.00"
        }
      },
      "description" : "Common data object used by both ```account```and  ```card```. The available balance of a card, not taking into account the due payments on the account."
    },
    "transaction" : {
      "type" : "object",
      "required" : ["transactionInfo"],
      "properties" : {
        "transactions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/transactionInfo"
          }
        }
      }
    },
    "transactionInfo" : {
      "type" : "object",
      "required" : [ "amount", "bookingDate", "transactionId" ],
      "properties" : {
        "transactionId" : {
          "type" : "string",
          "description" : "The unique ID of that transaction",
          "example" : "13829138"
        },
        "accountNumber" : {
          "type" : "string",
          "description" : "If the transaction was done on an account, this is the account number of that account.",
          "example" : "12001100000"
        },
        "transactionDate" : {
          "type" : "string",
          "description" : "Time of transaction formated by ISO 8601",
          "example" : "2018-08-22"
        },
        "bookingDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "The date that the transaction went throught",
          "example" : "2018-08-22"
        },
        "valueDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "The date on which the value is calcuated from (especially relevant for foreign transactions)",
          "example" : "2018-08-22"
        },
        "amount" : {
          "type" : "number",
          "description" : "Amount in the account's currency",
          "minimum" : 0,
          "example" : 1500
        },
        "description" : {
          "type" : "string",
          "description" : "Descriptive text for the transaction, defined by the customer",
          "example" : "Lunch at The Restaurant at the End of the Universe"
        },
        "externalReference" : {
          "type" : "string",
          "example" : "5895584"
        },
        "details" : {
          "type" : "object",
          "required" : ["textCode"],
          "properties" : {
            "textCode" : {
              "type" : "string",
              "example" : "0023"
            }
          }
        },
        "textLines" : {
          "type" : "object",
          "required" : ["Item"],
          "properties" : {
            "Item" : {
                "type" : "string",
                "example" : "Varekjøp"
            }
          }
        }
      },
      "description" : "A ```transaction``` is a completed operation between two accounts, in contrast to ```payment```, which is planned, but not completed."
    },
    "paymentInitiation" : {
      "type" : "object",
      "required" : [ "amount", "creditAccountNumber", "debitAccountNumber", "requestedExecutionDate" ],
      "properties" : {
        "kid" : {
          "type" : "string",
          "description" : "The payment type: KID, message or transfer. A transfer is a payment between two accounts with the same owner, a message is an outgoing payment with just a descriptive message and KID is a payment with a KID (customer identification) number.",
          "default" : "KID",
          "enum" : [ "KID", "MESSAGE", "TRANSFER" ],
          "example" : "578838425335143"
        },
        "debitAccountNumber" : {
          "type" : "string",
          "description" : "The account to send money.",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "example" : "12087840415"
        },
        "creditAccountNumber" : {
          "type" : "string",
          "description" : "The account to receive money.",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "example" : "12345678901"
        },
        "amount" : {
          "type" : "number",
          "example" : 1500.01,
          "description" : "The amount that needs to be payed"
        },
        "requestedExecutionDate" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2018-12-31",
          "description" : "The Date on which payment needs to be made"
        },
        "country" : {
          "type" : "String",
          "example" : "NO",
          "minLength" : 2,
          "maxLength" : 2
        },
        "currency" : {
          "type" : "String",
          "example" : "NOK",
          "minLength" : 3,
          "maxLength" : 3,
          "description" : "The currency of payment"
        },
        "immediatePayment" : {
          "type" : "boolean",
          "example" : false
        }
      },
      "description" : "The payment initiation object can be used for three types of payments, which should be specified in the ```type``` property:\n* ```KID```: The customer identification number specified by the recieving end, often described in the invioce. \n* ```MESSAGE```: A payment just having a text message attached with it.\n* ```TRANSFER```: A payment going between two DNB accounts having the same owner. \n\nNot including the \"straksbetaling\" (imediate payment) flag, as this will be the default.\n\nPayment initiator: Part of the context object, but kept here too for reference. "
    },
    "paymentUpdation" : {
      "type" : "object",
      "required" : [ "amount", "debitAccountNumber", "requestedExecutionDate", "status" ],
      "properties" : {
        "status" : {
          "type" : "string",
          "description" : "The payment type: KID, message or transfer. A transfer is a payment between two accounts with the same owner, a message is an outgoing payment with just a descriptive message and KID is a payment with a KID (customer identification) number.",
          "default" : "KID",
          "enum" : [ "KID", "MESSAGE", "TRANSFER" ],
          "example" : "578838425335143"
        },
        "debitAccountNumber" : {
          "type" : "string",
          "description" : "The account to send money.",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "example" : "12087840415"
        },
        "amount" : {
          "type" : "number",
          "example" : 1500.01,
          "description" : "The amount that needs to be payed"
        },
        "requestedExecutionDate" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2018-12-31",
          "description" : "The Date on which payment needs to be made"
        }
      }
    },
    "paymentDetails" : {
      "type" : "object",
      "properties" : {
        "invoiceReference" : {
          "type" : "string",
          "description" : "Used for eFaktura",
          "example" : "12345678901"
        }
      },
      "description" : "More details about a payment. Some payment types have more data than others."
    },
    "payment" : {
      "type" : "object",
      "required" : [ "amount", "creditAccount", "debitAccount", "paymentId" ],
      "properties" : {
        "paymentId" : {
          "type" : "string",
          "example" : "123456789"
        },
        "debitAccount" : {
          "type" : "string",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "example" : "12345678901"
        },
        "creditAccount" : {
          "type" : "string",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "example" : "12345678901"
        },
        "amount" : {
          "type" : "number",
          "example" : 1500.01
        },
        "type" : {
          "type" : "string",
          "description" : "The payment type: KID, message or transfer. A transfer is a payment between two accounts with the same owner, a message is an outgoing payment with just a descriptive message and KID is a payment with a KID (customer identification) number.",
          "example" : "KID"
        },
        "created" : {
          "type" : "string",
          "format" : "date",
          "description" : "The creation point of a payment",
          "example" : "2001-03-01 11:32:09"
        },
        "paymentDetails" : {
          "$ref" : "#/definitions/paymentDetails"
        },
        "country" : {
          "type" : "string",
          "example" : "NO"
        },
        "currency" : {
          "type" : "string",
          "example" : "NOK"
        }
      },
      "description" : "**NOTE:** May be completely merged with ```transaction```.\n\nA ```payment``` is a planned payment/transaction that has not yet been carried out.\n\nDetails about a payment. Used by:\n* /payments/due/{accountNumber}: Returning a list of payments, with _empty_ PaymentDetails\n* /payments/due/{accountNumber}/details: Returning a list of payments, with PaymentDetails"
    },
    "card" : {
      "type" : "object",
      "required" : [ "cardHolderName", "cardId", "cardStatus", "cardType", "customerId", "maskedCardNumber", "productName" ],
      "properties" : {
        "cardId" : {
          "type" : "string",
          "description" : "The ID of the card",
          "example" : "TQJQ95214468J85O"
        },
        "maskedCardNumber" : {
          "type" : "string",
          "description" : "The masked card number (what's printed on your actual card), but only displaying the four last digits.",
          "example" : "xxxx-xxxx-xxxx-1234"
        },
        "customerId" : {
          "type" : "string",
          "description" : "The customer id of the card holder",
          "example" : "19023959041"
        },
        "cardHolderName" : {
          "type" : "string",
          "description" : "The name of the card holder",
          "example" : "Bruce Wayne"
        },
        "cardType" : {
          "type" : "string",
          "description" : "The type of card",
          "default" : "DEBIT",
          "enum" : [ "DEBIT", "CREDIT" ],
          "example" : "DEBIT"
        },
        "productName" : {
          "type" : "string",
          "description" : "The product group of the card, such as \"VISA\" or \"MASTERCARD\".",
          "example" : "VISA"
        },
        "accountNumber" : {
          "type" : "string",
          "description" : "The account number that the card is linked to",
          "minLength" : 11,
          "maxLength" : 11,
          "example" : "12089146372"
        },
        "cardStatus" : {
          "type" : "string",
          "description" : "The status of the card",
          "default" : "ACTIVE",
          "enum" : [ "ACTIVE", "NOTACTIVE", "BLOCKED" ],
          "example" : "BLOCKED"
        },
        "blockingInfo" : {
          "required" : [ "performedBy", "unblockAllowed" ],
          "type" : "object",
          "properties" : {
            "performedBy" : {
              "type" : "string",
              "description" : "Who made the change (B - bank/C - customer)",
              "enum" : [ "B", "C" ],
              "example" : "B"
            },
            "timestamp" : {
              "type" : "string",
              "description" : "Timestamp of the action performed as defined by ISO 8601",
              "example" : "2017-03-01 11:32:09"
            },
            "blockAllowed" : {
              "type" : "boolean",
              "description" : "Can the card be blocked by the customer?",
              "example" : true
            },
            "unblockAllowed" : {
              "type" : "boolean",
              "description" : "Can the card be unblocked by the customer?",
              "example" : true
            }
          }
        },
        "created" : {
          "type" : "string",
          "description" : "When was the card created?",
          "example" : "2017-03-01 11:32:09"
        },
        "lastChanged" : {
          "type" : "string",
          "description" : "When was the last change on the card",
          "example" : "2017-03-01 11:32:09"
        }
      },
      "description" : "A `card` can represent either a credit card or a debit card in DNB. On a `credit card`, the customer can get unsecured credit up untill the `credit limit` through the card, often making the balance negative. A `debit card` would on the other hand be connected to a current account in DNB, making the balance positive, and usually denying negative balances."
    },
    "currencyRate" : {
      "type" : "object",
      "required" : [ "buyRateTransfer", "currency", "unit" ],
      "properties" : {
        "currency" : {
          "type" : "string",
          "description" : "ISO 4217: alpha 3-letter upcase: https://www.iso.org/iso-4217-currency-codes.html",
          "default" : "NOK",
          "minLength" : 3,
          "maxLength" : 3,
          "example" : "NOK"
        },
        "unit" : {
          "type" : "string",
          "description" : "1 or 100?",
          "example" : "1"
        },
        "buyRateTransfer" : {
          "type" : "number",
          "description" : "Rate for buying this currency (transfer/cheque)",
          "example" : 123.45
        },
        "sellRateTransfer" : {
          "type" : "number",
          "description" : "Rate for selling this currency (transfer/cheque).",
          "example" : 123.45
        },
        "midRate" : {
          "type" : "number",
          "description" : "Middle rate for this currency (transfer/cheque).",
          "example" : 123.45
        },
        "changeInRate" : {
          "type" : "number",
          "description" : "Not implemented."
        },
        "prevoiusRateTransfer" : {
          "type" : "number",
          "description" : "Not implemented."
        },
        "buyRateCash" : {
          "type" : "number",
          "description" : "Rate for buying this currency (cash)",
          "example" : 123.45
        },
        "sellRateCash" : {
          "type" : "number",
          "description" : "Rate for selling this currency (cash).",
          "example" : 123.45
        }
      },
      "description" : "Response structure for different exchange rates based on base currency.\n"
    },
    "openingTimes" : {
      "type" : "array",
      "description" : "Opening times for a ```branch```, ```ATM```, or something else.\n\nIf open 24 hours, ```openingTime``` is \"00:00\" and ```closingTime``` is \"24:00\". ",
      "items" : {
        "required" : [ "closingTime", "openingTime" ],
        "type" : "object",
        "properties" : {
          "day" : {
            "type" : "integer",
            "description" : "1: Monday, 2: Tuesday, etc",
            "minimum" : 1,
            "maximum" : 7,
            "example" : 1
          },
          "openingTime" : {
            "type" : "string",
            "description" : "HH:MM",
            "pattern" : "^\\d{2}:\\d{2}$",
            "example" : "09:00"
          },
          "closingTime" : {
            "type" : "string",
            "description" : "HH:MM",
            "pattern" : "^\\d{2}:\\d{2}$",
            "example" : "16:00"
          }
        }
      }
    },
    "address" : {
      "type" : "object",
      "required" : [ "postCode", "postalAddressCountry", "postalCodeName" ],
      "properties" : {
        "AddressLine1" : {
          "type" : "string",
          "description" : "Street name and number",
          "example" : "1007 Mountain Drive"
        },
        "AddressLine2" : {
          "type" : "string"
        },
        "AddressLine3" : {
          "type" : "string"
        },
        "postalCodeName" : {
          "type" : "string",
          "example" : "Gotham"
        },
        "postCode" : {
          "type" : "string",
          "description" : "Norwegian postcode only (for now).",
          "minLength" : 4,
          "maxLength" : 4,
          "pattern" : "^\\d{4}$",
          "example" : "011111"
        },
        "postalAddressCountry" : {
          "type" : "string",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "minLength" : 2,
          "maxLength" : 2,
          "example" : "US"
        }
      },
      "description" : "Corresponds with address fields used internally in DNB. \n\n```\n(Name from parent object)\nDronning Eufemias gate 30\nc/o CEO office\n0191 Oslo\nNO\n```"
    },
    "location" : {
      "type" : "object",
      "required" : [ "id", "latitude", "longditude" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Internal id",
          "example" : "12345"
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "Descriptive name",
          "example" : "DNB headquarters"
        },
        "latitude" : {
          "type" : "string",
          "pattern" : "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$",
          "example" : "59.9075823"
        },
        "longditude" : {
          "type" : "string",
          "pattern" : "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$",
          "example" : "10.760133399999972"
        },
        "description" : {
          "type" : "string",
          "description" : "May be used for large areas like airports, train stations, stadiums, etc.",
          "example" : "Lobby"
        }
      },
      "description" : "Data object for physical location based on GPS coordinates. May be used for something that does not have a specific address, or somethjing that needs a more specific than an address provides, such as an ```ATM``` at a train station. A ```location``` may be used in addition to an ```address```.\n"
    },
    "branch" : {
      "type" : "object",
      "required" : [ "id", "name", "openingTimes" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "SSL: storeCode"
        },
        "name" : {
          "type" : "string"
        },
        "categories" : {
          "type" : "string",
          "enum" : [ "BRANCH", "ATM" ]
        },
        "description" : {
          "required" : [ "norwegian" ],
          "type" : "object",
          "properties" : {
            "norwegian" : {
              "type" : "string"
            },
            "english" : {
              "type" : "string"
            }
          }
        },
        "address" : {
          "$ref" : "#/definitions/address"
        },
        "latitude" : {
          "type" : "string",
          "example" : "59.9075823"
        },
        "longitude" : {
          "type" : "string",
          "example" : "10.760133399999972"
        },
        "phone" : {
          "type" : "string"
        },
        "website" : {
          "type" : "string"
        },
        "openingTimes" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "openingTimesSummer" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "openingHoliday" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "currencies" : {
          "type" : "array",
          "description" : "Array of ISO 4217: alpha 3-letter upcase. https://www.iso.org/iso-4217-currency-codes.html",
          "items" : {
            "type" : "string",
            "example" : "NOK"
          }
        },
        "openingTimeSummertime" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "summertimeStart" : {
          "type" : "string",
          "format" : "date"
        },
        "summertimeStop" : {
          "type" : "string",
          "format" : "date"
        }
      },
      "description" : "All data about a branch.\n"
    },
    "atm" : {
      "type" : "object",
      "required" : [ "id", "name", "openingTimes" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "SSL: storeCode"
        },
        "name" : {
          "type" : "string"
        },
        "categories" : {
          "type" : "string",
          "enum" : [ "BRANCH", "ATM" ]
        },
        "description" : {
          "required" : [ "norwegian" ],
          "type" : "object",
          "properties" : {
            "norwegian" : {
              "type" : "string"
            },
            "english" : {
              "type" : "string"
            }
          }
        },
        "address" : {
          "$ref" : "#/definitions/address"
        },
        "latitude" : {
          "type" : "string",
          "example" : "59.9075823"
        },
        "longitude" : {
          "type" : "string",
          "example" : "10.760133399999972"
        },
        "phone" : {
          "type" : "string"
        },
        "website" : {
          "type" : "string"
        },
        "openingTimes" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "openingTimesSummer" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "openingHoliday" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "currencies" : {
          "type" : "array",
          "description" : "Array of ISO 4217: alpha 3-letter upcase. https://www.iso.org/iso-4217-currency-codes.html",
          "items" : {
            "type" : "string",
            "example" : "NOK"
          }
        },
        "openingTimeSummertime" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "summertimeStart" : {
          "type" : "string",
          "format" : "date"
        },
        "summertimeStop" : {
          "type" : "string",
          "format" : "date"
        }
      },
      "description" : "All data for an ATM.\n"
    },
    "error" : {
      "type" : "object",
      "properties" : {
        "errorDocumentation" : {
          "type" : "string",
          "description" : "URI to developer documentation for this error.",
          "example" : "https://developer.dnb.no/something-useful-goes-here/"
        },
        "errorDetails" : {
          "type" : "array",
          "description" : "Details about the cause of this error (or errors). May contain information about an invalid parameter, or another specific problem.",
          "items" : {
            "type" : "object",
            "properties" : {
              "errorNumber" : {
                "type" : "integer"
              },
              "errorField" : {
                "type" : "string",
                "description" : "Error cause. Not yet implemented.",
                "example" : "accountNumber"
              },
              "errorDetailsDescription" : {
                "type" : "string",
                "description" : "Error cause. Not yet implemented.",
                "example" : "accountNumber must be digits only"
              }
            }
          }
        }
      },
      "description" : "The HTTP status code (```httpStatus```) is the main classifier. A DNB-specific ```errorNumber```is also provided as a lookup reference. \n\nThe ```errorDocumentation``` is a URI to further information about the endpoint, with uesful infomration about correct usage.\n\nThe ```errorDetails```is specific information about the one or more errors that have occurred.\n\n**Note:** We strive to offer the best possible information about all errors. This depends on the information offered by the backend systems, and in some cases there is limited information available from the underlying solutions. In these cases, the errors may contain empty fields, and/or information that is difficult to interpret. In cases where the error information needs improvement, please let us know: developer@dnb.no. \n\nExample ```error``` (TODO: Work in progress: May need an update):\n```\n{\n  \"errorDocumentation\": \"https://developer.dnb.no/something-useful-goes-here/\",\n  \"errorDetails\": [\n    {\n      \"errorNumber\": \"123450\",\n      \"errorField\": \"accountNumber\",\n      \"errorDescription\": \"accountNumber must be digits only\"\n    },\n    {\n      \"errorNumber\": \"123451\",\n      \"errorField\": \"dateFrom\",\n      \"errorDescription\": \"dateFrom must be in ISO8601 date format\"\n    }\n  ]\n}\n```"
    },
    "headerLinks" : {
      "type" : "object",
      "required" : [ "first", "self" ],
      "properties" : {
        "first" : {
          "type" : "string",
          "example" : "https://api.example.com/something-first"
        },
        "self" : {
          "type" : "string",
          "example" : "https://api.example.com/something"
        },
        "previous" : {
          "type" : "string",
          "example" : "https://api.example.com/something-previous"
        },
        "next" : {
          "type" : "string",
          "example" : "https://api.example.com/something-next"
        }
      },
      "description" : "URIs for previous, this and next. Only ```self``` is required, as previous and next may not exist.\n\nSee also the pagination headers: ```pageNumber```and ```pageSize```."
    }
  }
}
